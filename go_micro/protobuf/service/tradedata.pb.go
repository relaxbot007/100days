// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.5.0
// source: tradedata.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol       string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price        float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Qty          float32 `protobuf:"fixed32,4,opt,name=qty,proto3" json:"qty,omitempty"`
	Total        float32 `protobuf:"fixed32,5,opt,name=total,proto3" json:"total,omitempty"`
	TradeStamp   int64   `protobuf:"varint,6,opt,name=trade_stamp,json=tradeStamp,proto3" json:"trade_stamp,omitempty"`
	IsBuyerMaker bool    `protobuf:"varint,7,opt,name=is_buyer_maker,json=isBuyerMaker,proto3" json:"is_buyer_maker,omitempty"`
	IsBestMatch  bool    `protobuf:"varint,8,opt,name=is_best_match,json=isBestMatch,proto3" json:"is_best_match,omitempty"`
}

func (x *TradeData) Reset() {
	*x = TradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradedata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeData) ProtoMessage() {}

func (x *TradeData) ProtoReflect() protoreflect.Message {
	mi := &file_tradedata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeData.ProtoReflect.Descriptor instead.
func (*TradeData) Descriptor() ([]byte, []int) {
	return file_tradedata_proto_rawDescGZIP(), []int{0}
}

func (x *TradeData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradeData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeData) GetQty() float32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *TradeData) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TradeData) GetTradeStamp() int64 {
	if x != nil {
		return x.TradeStamp
	}
	return 0
}

func (x *TradeData) GetIsBuyerMaker() bool {
	if x != nil {
		return x.IsBuyerMaker
	}
	return false
}

func (x *TradeData) GetIsBestMatch() bool {
	if x != nil {
		return x.IsBestMatch
	}
	return false
}

type GetTradeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTradeDataRequest) Reset() {
	*x = GetTradeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradedata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeDataRequest) ProtoMessage() {}

func (x *GetTradeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradedata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeDataRequest.ProtoReflect.Descriptor instead.
func (*GetTradeDataRequest) Descriptor() ([]byte, []int) {
	return file_tradedata_proto_rawDescGZIP(), []int{1}
}

func (x *GetTradeDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTradeDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTradeDataReply) Reset() {
	*x = GetTradeDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradedata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeDataReply) ProtoMessage() {}

func (x *GetTradeDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_tradedata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeDataReply.ProtoReflect.Descriptor instead.
func (*GetTradeDataReply) Descriptor() ([]byte, []int) {
	return file_tradedata_proto_rawDescGZIP(), []int{2}
}

func (x *GetTradeDataReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_tradedata_proto protoreflect.FileDescriptor

var file_tradedata_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x4e, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tradedata_proto_rawDescOnce sync.Once
	file_tradedata_proto_rawDescData = file_tradedata_proto_rawDesc
)

func file_tradedata_proto_rawDescGZIP() []byte {
	file_tradedata_proto_rawDescOnce.Do(func() {
		file_tradedata_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradedata_proto_rawDescData)
	})
	return file_tradedata_proto_rawDescData
}

var file_tradedata_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tradedata_proto_goTypes = []interface{}{
	(*TradeData)(nil),           // 0: TradeData
	(*GetTradeDataRequest)(nil), // 1: GetTradeDataRequest
	(*GetTradeDataReply)(nil),   // 2: GetTradeDataReply
}
var file_tradedata_proto_depIdxs = []int32{
	1, // 0: TradeDataService.GetTradeData:input_type -> GetTradeDataRequest
	2, // 1: TradeDataService.GetTradeData:output_type -> GetTradeDataReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tradedata_proto_init() }
func file_tradedata_proto_init() {
	if File_tradedata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tradedata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradedata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradedata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradedata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tradedata_proto_goTypes,
		DependencyIndexes: file_tradedata_proto_depIdxs,
		MessageInfos:      file_tradedata_proto_msgTypes,
	}.Build()
	File_tradedata_proto = out.File
	file_tradedata_proto_rawDesc = nil
	file_tradedata_proto_goTypes = nil
	file_tradedata_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradeDataServiceClient is the client API for TradeDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradeDataServiceClient interface {
	GetTradeData(ctx context.Context, in *GetTradeDataRequest, opts ...grpc.CallOption) (*GetTradeDataReply, error)
}

type tradeDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeDataServiceClient(cc grpc.ClientConnInterface) TradeDataServiceClient {
	return &tradeDataServiceClient{cc}
}

func (c *tradeDataServiceClient) GetTradeData(ctx context.Context, in *GetTradeDataRequest, opts ...grpc.CallOption) (*GetTradeDataReply, error) {
	out := new(GetTradeDataReply)
	err := c.cc.Invoke(ctx, "/TradeDataService/GetTradeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeDataServiceServer is the server API for TradeDataService service.
type TradeDataServiceServer interface {
	GetTradeData(context.Context, *GetTradeDataRequest) (*GetTradeDataReply, error)
}

// UnimplementedTradeDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTradeDataServiceServer struct {
}

func (*UnimplementedTradeDataServiceServer) GetTradeData(context.Context, *GetTradeDataRequest) (*GetTradeDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeData not implemented")
}

func RegisterTradeDataServiceServer(s *grpc.Server, srv TradeDataServiceServer) {
	s.RegisterService(&_TradeDataService_serviceDesc, srv)
}

func _TradeDataService_GetTradeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeDataServiceServer).GetTradeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeDataService/GetTradeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeDataServiceServer).GetTradeData(ctx, req.(*GetTradeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradeDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TradeDataService",
	HandlerType: (*TradeDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTradeData",
			Handler:    _TradeDataService_GetTradeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradedata.proto",
}
